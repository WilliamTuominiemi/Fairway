datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  activities    Activity[]
  events        Event[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  stats         Stats?
  golfclubs     Golfclub[]
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friends       Friendship[]  @relation("friends")
  friendsOf     Friendship[]  @relation("friendsOf")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  details   String
  date      DateTime // Added date field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stats {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  handicap           Int      @default(0)
  averageScore       Int      @default(0)
  drivingAccuracy    Int      @default(0)
  greensInRegulation Int      @default(0)
  puttsPerRound      Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Golfclub {
  id        String  @id @default(cuid())
  userId    String  
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  name      String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())

  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Friendship {
  id         String   @id @default(cuid())
  user1Id    String
  user2Id    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user1      User     @relation("friends", fields: [user1Id], references: [id], onDelete: Cascade)
  user2      User     @relation("friendsOf", fields: [user2Id], references: [id], onDelete: Cascade)
  
  @@unique([user1Id, user2Id])
}

model Event {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date            DateTime
  time            String
  type            String
  maxParticipants Int
  address         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}